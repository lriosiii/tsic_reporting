With totalRecruitedStudentsCte (TotalRecruitedStudents, OfficeName, OfficeID) As
	(
		Select Count(ss.CountyID) As TotalRecruitedStudents,
			o.OfficeName,
			ss.OfficeID
		From Students.Students ss
			Join Offices.Offices o
				On ss.OfficeID = o.OfficeID
		Where ss.StudentStatusID
				In (1, 3, 4, 5) -- All active except "On Hold"
			And ss.ContractSignedDate Between '2019-06-06' And '2020-06-03'
			And ss.IsDeleted = 0
			and o.OfficeID not in (18,19,20)
		Group By o.OfficeName, ss.OfficeID
	),

	Data1totalRecruitedStudentsCTE (TotalRecruitedStudents, OfficeName, OfficeID) AS
	/* Secial Case table for Datapoint 1 Denominator */
	(
		SELECT
			Count(ss.countyid) As totalrecruitedstudents,
			o.officename,
			ss.officeid
		FROM students.students ss
		INNER JOIN offices.offices o ON ss.officeid = o.officeid
		WHERE 1=1
			AND ss.studentstatusid IN (1, 3, 4, 5) -- All active except "On Hold"
			AND ss.contractsigneddate BETWEEN '2019-06-06' And '2020-06-03'
			AND ss.isdeleted = 0
			AND NOT ( (ss.enrollmentvariance = 1) OR (ss.wfieligible = 1) AND ss.EntryGradeLevelID IN (10,11) )
			AND o.officeid NOT IN (18,19,20)
		GROUP BY o.officename, ss.officeid
	)



	, totalActiveStudentsformeasuresCte (TotalActiveStudents, OfficeName, OfficeID) As
	(
		Select Count(ss.CountyID) As TotalActiveStudents,
			o.OfficeName,
			ss.OfficeID
		From Students.Students ss
			Join Offices.Offices o
				On ss.OfficeID = o.OfficeID
		Where ss.StudentStatusID
				In (1, 3, 4, 5) -- All active except "On Hold"
			And ss.ContractSignedDate < '2019-11-01'
			And ss.IsDeleted = 0
			and o.OfficeID not in (18,19,20)
		Group By  o.OfficeName, ss.OfficeID

	)

	, totalActiveStudentsByEntryGradeCte (TotalActiveStudents, OfficeName, EntryGrade,  OfficeID) As
	(
		Select isnull(Count(ss.CountyID),0) As TotalActiveStudents,
			o.OfficeName,
			ss.EntryGradeLevelID  AS EntryGrade,
			ss.OfficeID
		From Students.Students ss
		Join Offices.Offices o On ss.OfficeID = o.OfficeID
		Where ss.StudentStatusID
			In (1, 3, 4, 5) -- All active except "On Hold"
			And ss.ContractSignedDate  Between '2019-06-06' And '2020-06-03'
			and ss.EntryGradeLevelID in (6,7,8,9)
			and o.OfficeID not in (18,19,20)
		Group By ss.EntryGradeLevelID, o.OfficeName, ss.OfficeID

	)

	, totalActiveStudentsBytypeCte (TotalActiveStudents, OfficeName, StudentType,  OfficeID) As
	(
		Select Count(ss.CountyID) As TotalActiveStudents,
			o.OfficeName,
			case when sap.PriorityType is null then ss.PriorityType
			else sap.PriorityType  end AS studenttype,
			ss.OfficeID
		From Students.Students ss
			Join Offices.Offices o
				On ss.OfficeID = o.OfficeID
				left join students.Applications sap on sap.StudentID = ss.StudentID
		Where ss.StudentStatusID
				In (1, 3, 4, 5) -- All active except "On Hold"
				And ss.ContractSignedDate Between '2019-06-06' And '2020-06-03'
				and COALESCE(ss.PriorityType ,sap.PriorityType) = 2
				and o.OfficeID not in (18,19,20)
		Group By sap.PriorityType, ss.PriorityType, o.OfficeName, ss.OfficeID

	)

	, totalActiveStudentsByGPACte (TotalActiveStudents, OfficeName, EntryGPA,  OfficeID) As
	(
		Select Count(ss.CountyID) As TotalActiveStudents,
			o.OfficeName,
			case when sap.GPA = 0.00  then ss.EntryGPA
				when sap.GPA is null then ss.EntryGPA
			else sap.GPA  end AS EntryGPA,
			ss.OfficeID
		From Students.Students ss
			Join Offices.Offices o
				On ss.OfficeID = o.OfficeID
				left join students.Applications sap on sap.StudentID = ss.StudentID
		Where ss.StudentStatusID
				In (1, 3, 4, 5) -- All active except "On Hold"
			And ss.ContractSignedDate
				Between '2019-06-06' And '2020-06-03'
				and COALESCE(ss.EntryGPA,sap.GPA) >= 2.0
				and o.OfficeID not in (18,19,20)
		Group By sap.GPA, ss.EntryGPA, o.OfficeName, ss.OfficeID

),
 totalEventsCte ( OfficeName, AllEvents, Totalevents, FAFSA, SeniorCollegePrep, NSO, CRE, OfficeID) As
	(
		Select
			o.OfficeName,
			ws.TotalCollegeReadiessWorkshops
			,case when ws.[FAFSA/FinancialAidEvents] = 0 or ws.SeniorCollegePrepEvents = 0 or ws.NewStudentOrientationEvents = 0 or ws.CollegeReadinessEvents < 2 then 0  --CLF updated CollegeReadinessEvents to < 2
					else ws.TotalCollegeReadiessWorkshops
					end AS total
				,ws.[FAFSA/FinancialAidEvents]
				,ws.SeniorCollegePrepEvents
				,ws.NewStudentOrientationEvents
				,ws.CollegeReadinessEvents
			,ws.OfficeID
		From reports.BSC__nCRWorkshops ws
			left join Offices.offices o on o.OfficeID = ws.OfficeID
			where o.OfficeID not in (18,19,20)
		Group By   o.OfficeName, ws.OfficeID, ws.CollegeReadinessEvents,
		ws.[FAFSA/FinancialAidEvents], ws.NewStudentOrientationEvents, ws.TotalCollegeReadiessWorkshops, ws.SeniorCollegePrepEvents, ws.CollegeReadinessEvents



	),

	totalStudentsWithGPACte (TotalStudentsWithGPA, OfficeName, OfficeID) As
	(
		Select Count(distinct(sg.StudentID)) As TotalStudentsWithGPA,
			o.OfficeName
			,ss.OfficeID
		From Students.Students ss
			left Join Students.GPA sg
				On ss.StudentID = sg.StudentID
				Join Offices.Offices o
				On ss.OfficeID = o.OfficeID
		Where ss.StudentStatusID
				In (1, 3, 4, 5) -- All active except "On Hold"
			And ss.CurrentGradeLevelID  IS NOT NULL
			And sg.SemesterEndDate Between '2019-12-01' And '2020-03-31'
			And sg.SchoolTermTypeID in (17, 30, 0)
			And (sg.SemesterUnweighted > 0 Or sg.CumulativeUnweighted > 0)
			And sg.IsDeleted = 0
			And ss.ContractSignedDate  < '2019-11-01'
			and o.OfficeID not in (18,19,20)

		Group By o.OfficeName, ss.OfficeID

	),

	 CollegeSuccessCoachVisits (OfficeName, TotalVisit, ccu, StudentID, Grade, OfficeID) as

	(Select
			o.officename
			,(Select Count(sc.StudentID)
			From Students.Communications sc
				left join reports.BSC_Dates b on ss.StudentID = b.studentid
		Where ss.StudentStatusID
				In (1, 3, 4, 5) -- All active except "On Hold"
			And  ((b.IsTransfer = 0 and  sc.NoteDate Between '2019-07-01' AND '2020-06-30') or (b.IsTransfer = 1 and  sc.NoteDate Between b.MMCSCDate AND '2020-06-30'))
			and b.MMCSCDate <= '2019-10-31'
			And sc.StudentCommunicationTypeID = 1
			And sc.IsDeleted = 0
			and ss.StudentID = sc.StudentID
			--and
			) as TotalVisits
			, 1 as 'ccu'
			,ss.StudentID
			,ss.CurrentGradeLevelID
			,ss.OfficeID
		From Students.Students ss

			left Join Offices.Offices o
				On ss.OfficeID = o.OfficeID
				left Join Students.Communications sc
				On ss.StudentID = sc.StudentID
				left join reports.BSC_Dates bd on ss.StudentID = bd.studentid
		Where ss.StudentStatusID
				In (1, 3, 4, 5) -- All active except "On Hold"
			--And ss.ContractSignedDate < '2018-11-01'
			and ss.IsDeleted = 0
			and bd.MMCSCDate <= '2019-10-31'
			and o.IsDeleted = 0
			and o.OfficeID not in (18,19,20)
		Group By ss.StudentID, ss.StudentStatusID, o.officename, CurrentGradeLevelID, ss.OfficeID
		),

	CVKPI (KPI, OfficeName, TotalSVisit, OfficeID) as

(

	select
			(Select cast(count(csce.StudentID) as int)
				from CollegeSuccessCoachVisits csce
				left join reports.BSC_Dates bdi on bdi.studentid = csce.StudentID
				 where (
                     (csce.Grade between 11 and 12 and csce.TotalVisit >=2 and bdi.MMCSCDate <'2019-11-01')
                        or	(csce.Grade between 5 and 10 and csce.TotalVisit >=1 and bdi.mmcscdate <= '2019-11-01')
--                        or	(csce.grade between 11 and 12 and csce.TotalVisit >=2 and bdi.MMCSCDate between '2019-11-01' and '2020-03-31')
--                        or	(csce.Grade between 5 and 10 and csce.TotalVisit >=1 and bdi.mmcscdate between '2019-11-01' and '2020-03-31')
					)
				 and csce.OfficeID = ss.OfficeID
				 )as KPI
			,o.OfficeName
			,(Select Cast(count(csc.StudentID) as int)
				from Students.Students csc
				left join reports.BSC_Dates bdi on bdi.StudentID = csc.StudentID
			where csc.OfficeID = ss.OfficeID and  bdi.MMCSCDate <= '2019-11-01' and csc.StudentStatusID in (1,3,4,5) and csc.IsDeleted = 0
			) TotalVisit
			,ss.OfficeID

	From Students.Students ss
	left join CollegeSuccessCoachVisits cscv on ss.StudentID = cscv.StudentID
	left join Offices.Offices o on o.OfficeID = ss.OfficeID
 where o.IsDeleted = 0 and cscv.OfficeID not in (18,19,20)
	group by  o.OfficeName, ss.OfficeID
	)

	, DataReq (OfficeName, SSN, Fname, LName, Birthdate, County, Gender, Address1, city, state1, zipcode, phone, emailaddress, school,grade,
entrygrade, incomesubmitted, finalreportcard, interviewsconducted, checktranscripts, financiallyqualified, referenceform, entrygpa, semestergpa,
riskfactors, studenttype, contracttype, scholarshipnumber, timelymentor, race, ishispanic, advocate, contractsigndate, familysituation, guardianname,
guardianaddress, guardiancity, guardianstate, guardianzip, guardianphone, guardianemail, brightfutures, duallenrollment, APcredits,
Mentorfname, mentorlname, mentorDOB, mentorgender, mentorsal, mentorcounty, mentorrace, mentorjoin, mentorphone, mentoraddress, mentorcity, mentorstate, mentorzip, mentoremail,
mentorbckgrd, mentortraining, mentorfingerprint, officeid) as

(Select
		o.Officename
		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.SSN is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as snn

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.FirstName is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as fname

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.LastName is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as lname

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.BirthDate is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Birthdate

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.CountyID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as County

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.Gender is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as gender

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join Common.Addresses ca on ca.AddressID = ss.AddressID
		where ca.Address1 is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as 'address1'

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join Common.Addresses ca on ca.AddressID = ss.AddressID
		where ca.City is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as 'city'

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join Common.Addresses ca on ca.AddressID = ss.AddressID
		where ca.StateID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as 'state1'

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join Common.Addresses ca on ca.AddressID = ss.AddressID
		where ca.ZipCode is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as 'ZipCode'

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where (ss.MobilePhoneNumber is null and ss.HomePhoneNumber is null) and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Phone

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.EmailAddress is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as EmailAddress

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.SchoolID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as School

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.CurrentGradeLevelID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Grade

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.EntryGradeLevelID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as EntryGrade

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.IncomeEligibilityDocumentsSubmited = 0 and sa.ApplicationCompletionDate is not null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as IncomeEligible

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.FinalReportCardSubmited = 0 and sa.ApplicationCompletionDate is not null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as FinalReportCard

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.InterviewsConducted = 0 and sa.ApplicationCompletionDate is not null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as interviewsConducted

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.CheckTranscripts = 0 and sa.ApplicationCompletionDate is not null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as CheckTranscripts

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.FinanciallyQualified = 0 and sa.ApplicationCompletionDate is not null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as FinanciallyQualified

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.ReferenceFormSubmitted = 0 and sa.ApplicationCompletionDate is not null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as ReferenceSubmitted

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where ((ss.EntryGPA is null and sa.GPA is null) or (ss.EntryGPA = 0 and sa.GPA = 0)) and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as EntryGPA

		--TODO: Possible duplication of studentIDs through joins
		,(select case when GETDATE() < '2020-03-31' then 0
		else
		(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.GPA g on g.StudentID = ss.StudentID
		where ss.StudentStatusID in (1,3,4,5)
		and ss.ContractSignedDate < '2019-11-01'
		and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		and ss.StudentID not in
		(select sg.StudentID
		from students.GPA sg
		where sg.SemesterEndDate between '2019-12-01' and '2020-03-31' and sg.SchoolTermTypeID in (17,30,0) and sg.IsDeleted = 0
		))
		end as SemesterGPA) as SemesterGPA

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.RiskFactorScore is null and sa.ApplicationCompletionDate is not null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and oo.OfficeID = ss.OfficeID
		) RiskFactor

			,(select count(distinct ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where sa.PriorityType is null and ss.PriorityType is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as StudentType

		,(select count(distinct ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Applications sa on sa.StudentID = ss.StudentID
		where ss.ContractTypeID is null  and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as ContractType

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join Offices.Scholarships os on ss.StudentID = os.StudentID
		left join Reports.BSC_dates bd on bd.StudentID = ss.StudentID
		where (os.ContractNumber is null or os.HoursAvail = 0 ) and ss.WfiEligible = 0
		and ss.StudentStatusID in (1,3,4,5) and bd.xIsTransfer = 0 and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as ScholarshipNumber

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join reports.BSC__nTimelyMentorMatch bsm on bsm.StudentID = ss.StudentID
		where bsm.TimelyMatch = 'False' and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as TimelyMentor

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.RaceID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Race

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.IsHispanic is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as IsHispanic

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.AdvocateID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Advocate

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.ContractSignedDate is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as ContractSignedDate

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.FamilySituationID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Familysituation

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		where ss.FirstGenerationCollegeStudent is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as FirstGeneration

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Contacts sc on sc.StudentID = ss.StudentID
		where sc.ContactName is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as GuardianName

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Contacts sc on sc.StudentID = ss.StudentID
		left join common.Addresses ca on ca.AddressID = sc.AddressID
		where ca.Address1 is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Guardianaddress

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Contacts sc on sc.StudentID = ss.StudentID
		left join common.Addresses ca on ca.AddressID = sc.AddressID
		where ca.City is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as GuardianCity

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Contacts sc on sc.StudentID = ss.StudentID
		left join common.Addresses ca on ca.AddressID = sc.AddressID
		where ca.StateID is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as Guardianstate

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Contacts sc on sc.StudentID = ss.StudentID
		left join common.Addresses ca on ca.AddressID = sc.AddressID
		where ca.ZipCode is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as GuardianZip

			,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Contacts sc on sc.StudentID = ss.StudentID
		where (sc.ContactCellPhone is null  and sc.ContactHomePhone is null and sc.ContactWorkPhone is null) and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as GuardianPhone

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		left join students.Contacts sc on sc.StudentID = ss.StudentID
		where sc.EmailAddress is null and ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as GuardianEmail

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID
		--left join students.Contacts sc on sc.StudentID = ss.StudentID								--DON'T MISS THIS UPDATE
		where ss.BrightFutureID is null and ss.StudentStatusID in (11,12,13,14,15) and ss.GraduationYear = 2019 and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as BrightFutures

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID											--DON'T MISS THIS UPDATE
		where ss.DualEnrollmentCredits is null and ss.StudentStatusID in (11,12,13,14,15) and ss.GraduationYear = 2019 and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as DualEnrollment

		,(select count(ss.StudentID)
		from students.students ss
		left join offices.offices oo on oo.OfficeID = ss.OfficeID									--DON'T MISS THIS UPDATE
		where ss.APCredits is null and ss.StudentStatusID in (11,12,13,14,15) and ss.GraduationYear = 2019 and ss.IsDeleted = 0 and o.OfficeID = ss.OfficeID
		) as APCredits

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.FirstName is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorFirst

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.LastName is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as Mentorlast

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.BirthDate is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorDOB

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.Gender is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorGender

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.SalutationID is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorSalutation

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.CountyID is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorCounty

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.RaceID is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorRace

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.JoinReasonID is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorJoinReason

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where (mm.HomePhoneNumber is null and mm.WorkPhoneNumber is null and mm.MobilePhoneNumber is null) and  mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorPhone

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		left join Common.Addresses ca on ca.AddressID = mm.AddressID
		where ca.Address1 is null and  mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorAddress

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		left join Common.Addresses ca on ca.AddressID = mm.AddressID
		where ca.City is null and  mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorCity

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		left join Common.Addresses ca on ca.AddressID = mm.AddressID
		where ca.StateID is null and  mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorState

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		left join Common.Addresses ca on ca.AddressID = mm.AddressID
		where ca.ZipCode is null and  mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorZip

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where map.BackgroundCheckReceivedDate is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorBGDDate

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.TrainingCompletedDate is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorTrainingDate

		,(select count(mm.MentorID)
		from mentors.mentors mm
		left join offices.offices oo on oo.OfficeID = mm.OfficeID
		left join mentors.Applications map on map.MentorID = mm.MentorID
		where mm.FingerPrintDate is null and mm.MentorStatusID = 1  and map.ApplicationStartDate > '2013-12-31' and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
		) as MentorFingerPrint
		,o.OfficeID

		From Offices.offices o
		where o.IsDeleted = 0 and o.OfficeID not in (18,19,20))

, MissingDataPt (OfficeName, MissingDataPt, OfficeID) as

(
	select OfficeName,
	 (SSN + Fname +  LName + Birthdate + County + Gender +  Address1 + city +  state1 +  zipcode +  phone +  emailaddress +  school + grade +
	entrygrade + incomesubmitted +  finalreportcard +  interviewsconducted +  checktranscripts +  financiallyqualified +  referenceform + entrygpa +  semestergpa +
	riskfactors +  studenttype +  contracttype +  scholarshipnumber + timelymentor + race + ishispanic + advocate + contractsigndate + familysituation + guardianname +
	guardianaddress + guardiancity + guardianstate + guardianzip + guardianphone + guardianemail + brightfutures + duallenrollment + APcredits +
	Mentorfname + mentorlname + mentorDOB + mentorgender + mentorsal + mentorcounty + mentorrace + mentorjoin + mentorphone + mentoraddress + mentorcity + mentorstate + mentorzip + mentoremail +
	mentorbckgrd + mentortraining + mentorfingerprint) as MissingDatapt
	, officeid
	from DataReq
)

,DataDenom (OfficeName, TotalDatapoints, OfficeID) as
	(Select
		o.OfficeName,
		Cast((
				(
				select count(ss.StudentID)*41
				from students.students ss
				left join offices.offices oo on oo.OfficeID = ss.OfficeID
				where ss.StudentStatusID in (1,3,4,5) and ss.IsDeleted = 0 and ss.CurrentGradeLevelID between 5 and 12 and o.OfficeID = ss.OfficeID
				)
					+
				(
				select count(mm.MentorID)*19
				from Mentors.Mentors mm
				left join offices.offices oo on oo.OfficeID = mm.OfficeID
				where mm.MentorStatusID = 1  and mm.IsDeleted = 0 and o.OfficeID = mm.OfficeID
				)
					+
				(
				select count(ss.StudentID)*3
				from students.students ss
				left join offices.offices oo on oo.OfficeID = ss.OfficeID							--DON'T MISS THIS UPDATE
				where ss.StudentStatusID in (11,12,13,14,15) and ss.IsDeleted = 0 and ss.GraduationYear = 2019 and o.OfficeID = ss.OfficeID
				)
			) as int)as TotalDataPoints
		,o.OfficeID
	From Offices.offices o
	where o.IsDeleted = 0 and o.OfficeID not in (18,19,20)
	)


	Select
		1 As DataPointNumber,
		'Percent of students recruited in grades 6-9' as 'Metric', -- DataPointDescription
		--acte.CountyID,
		acte.OfficeName,
		SUM(acte.TotalActiveStudents)  As KPI, --ValueMatch, -- Count of students that match
		isnull(tr.TotalRecruitedStudents,0) As Total, -- Total recruited students for same period
		Convert(Int, Ceiling((IsNull(sum(acte.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) As Result, -- percent
		CASE when Convert(Int, Ceiling((IsNull(sum(acte.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) between 95 and 100 then 10
		when Convert(Int, Ceiling((IsNull(sum(acte.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) between 85 and 94 then 8
		when Convert(Int, Ceiling((IsNull(sum(acte.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) < 85 then 0
		else ''
		end as Points,
		'' as Comments,
		tr.OfficeID
	From
		totalActiveStudentsByEntryGradeCte acte
	Left Outer Join
	Data1totalRecruitedStudentsCTE tr on acte.OfficeID = tr.OfficeID
	group by acte.OfficeName, tr.TotalRecruitedStudents, tr.OfficeID


Union

	Select
		2 As DataPointNumber,
		'Percent of students recruited as Type 2' as 'Metric', -- DataPointDescription
		--actt.CountyID,
		actt.OfficeName,
		SUM(actt.TotalActiveStudents)  As KPI, --ValueMatch, -- Count of students that match
		tr.TotalRecruitedStudents As Total, -- Total recruitedCollegeSuccessCoachVisits students for same period
		Convert(Int, Ceiling((IsNull(sum(actt.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) As Result, -- percent
		CASE when Convert(Int, Ceiling((IsNull(sum(actt.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) between 75 and 85 then 10
		when Convert(Int, Ceiling((IsNull(sum(actt.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) between 86 and 100 then 8
		when Convert(Int, Ceiling((IsNull(sum(actt.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) between 65 and 74 then 8
		when Convert(Int, Ceiling((IsNull(sum(actt.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) < 64 then 0
		else ''
		end as Points,
		'' as Comments,
		tr.OfficeID
	From
		totalActiveStudentsBytypeCte actt
	Left Outer Join
	totalRecruitedStudentsCte tr on actt.OfficeID = tr.OfficeID
	group by  actt.OfficeName, tr.TotalRecruitedStudents, tr.OfficeID


union

Select
		3 As DataPointNumber,
		'Percent of students recruited with >2.0 GPA' as 'Metric', -- DataPointDescription
		--actg.CountyID,
		actg.OfficeName,
		SUM(actg.TotalActiveStudents)  As KPI, --ValueMatch, -- Count of students that match
		tr.TotalRecruitedStudents As Total, -- Total recruited students for same period
		Convert(Int, Ceiling((IsNull(sum(actg.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) As Result, -- percent
		CASE when Convert(Int, Ceiling((IsNull(sum(actg.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) = 100 then 5
		when Convert(Int, Ceiling((IsNull(sum(actg.totalactivestudents), 0) / Cast(tr.TotalRecruitedStudents As Decimal)) * 100)) < 100 then 0
		else ''
		end as Points,
		'' as Comments,
		tr.OfficeID
	From
		totalActiveStudentsByGPACte actg
	Left Outer Join
	totalRecruitedStudentsCte tr on actg.OfficeID = tr.OfficeID
	group by  actg.OfficeName, tr.TotalRecruitedStudents, tr.OfficeID

union

Select
		4 As DataPointNumber,
		'Meeting CR Workshop Requirement' as 'Metric', -- DataPointDescription
		--te.CountyID,
		te.OfficeName,
		SUM(te.AllEvents)  As KPI, --ValueMatch
		5 As Total, -- Total
		case when te.FAFSA = 0 or te.NSO = 0 or te.SeniorCollegePrep = 0 or te.CRE = 0 then Convert(Int, Ceiling((IsNull(sum(te.Totalevents), 0) / Cast(5 As Decimal)) * 100))
		 when te.FAFSA > 0 and te.NSO > = 0 and te.SeniorCollegePrep > 0 and te.CRE > 0 then Convert(Int, Ceiling((IsNull(sum(te.AllEvents), 0) / Cast(5 As Decimal)) * 100))
		 else''
		 end As Result, -- percent
		CASE when sum(te.Totalevents) >=6 then 5
			when sum(te.Totalevents) =5 then 3
			when sum(te.Totalevents) <5 then 0
		else ''
		end as Points,
	case when te.FAFSA = 0 and te.NSO = 0 and te.SeniorCollegePrep = 0 and te.CRE < 2 then 'Missing FAFSA, New Student Orientation, College Readiness Workshops, and Senior College Prep Workshops'
	when te.FAFSA = 0 and te.NSO = 0 and te.CRE < 2 then 'Missing FAFSA, College Readiness Events, and New Student Orientation Workshops'
	when te.FAFSA = 0 and te.SeniorCollegePrep = 0 and te.CRE < 2 then 'Missing FAFSA, College Readiness Events, and Senior College Prep Workshops'
	when te.NSO = 0 and te.SeniorCollegePrep = 0 and te.CRE < 2 then 'Missing New Student Orientation, College Readiness Events, and Senior College Prep Workshops'
	when te.FAFSA = 0 and te.CRE < 2 then 'Missing FAFSA and College Readiness Events'
	when te.NSO = 0 and te.CRE < 2 then 'Missing New Student Orientation and College Readiness Events'
	when te.SeniorCollegePrep = 0 and te.CRE < 2 then 'Missing Senior College Prep and College Readiness Events'
	when te.FAFSA = 0 and te.NSO = 0 then 'Missing FAFSA and New Student Orientation Workshops'
	when te.FAFSA = 0 and te.SeniorCollegePrep = 0 then 'Missing FAFSA and Senior College Prep Workshops'
	when te.NSO = 0 and te.SeniorCollegePrep = 0 then 'Missing New Student Orientation and Senior College Prep Workshops'
	when te.FAFSA = 0 then 'Missing FAFSA Workshop'
	when te.NSO = 0 then 'Missing New Student Orientation Workshop'
	when te.SeniorCollegePrep = 0 then 'Missing Senior College Prep Workshop'
	when te.CRE < 2  then 'Missing College Readiness Workshop'
	else ''
	end
	as Comments,
		te.OfficeID
	From
		totalEventsCte te
	group by te.OfficeName, te.OfficeID, te.NSO, te.SeniorCollegePrep, te.FAFSA, te.CRE

Union

Select
		5 As DataPointNumber,
		'Percent of Students with Semester 1 GPA' as 'Metric', -- DataPointDescription
		--tacm.CountyID,
		tacm.OfficeName,
		IsNull(sum(swg.TotalStudentsWithGPA), 0)  As KPI, --ValueMatch
		tacm.TotalActiveStudents As Total, -- Total
		Convert(Int, Ceiling((IsNull(sum(swg.TotalStudentsWithGPA), 0) / Cast(tacm.TotalActiveStudents As Decimal)) * 100)) As Result, -- percent
		CASE when Convert(Int, Ceiling((IsNull(sum(swg.TotalStudentsWithGPA), 0) / Cast(tacm.TotalActiveStudents As Decimal)) * 100)) between 95 and 100 then 5
		when Convert(Int, Ceiling((IsNull(sum(swg.TotalStudentsWithGPA), 0) / Cast(tacm.TotalActiveStudents As Decimal)) * 100)) between 85 and 94 then 3
		when Convert(Int, Ceiling((IsNull(sum(swg.TotalStudentsWithGPA), 0) / Cast(tacm.TotalActiveStudents As Decimal)) * 100)) < 85 then 0
		else ''
		end as Points,
		'' as Comments,
		tacm.OfficeID
	From totalActiveStudentsformeasuresCte tacm
		left join totalStudentsWithGPACte swg  on swg.OfficeID = tacm.OfficeID
	group by  tacm.OfficeName, tacm.OfficeID, tacm.TotalActiveStudents

Union

Select
		6 As DataPointNumber,
		'Percent of students receiving college readiness contact' as 'Metric', -- DataPointDescription
		--CVKPI.CountyID,
		CVKPI.OfficeName,
		CVKPI.KPI As KPI, --ValueMatch
		CVKPI.TotalSVisit As Total -- Total
		,Convert(Int, Ceiling((IsNull((cvkpi.kpi), 0) / Cast(cvkpi.totalSvisit As Decimal)) * 100)) As Result, -- percent
		CASE when Convert(Int, Ceiling((IsNull((cvkpi.kpi), 0) / Cast(cvkpi.totalSvisit As Decimal)) * 100)) between 95 and 100 then 15
		when Convert(Int, Ceiling((IsNull((cvkpi.kpi), 0) / Cast(cvkpi.totalSvisit As Decimal)) * 100)) between 85 and 94 then 12
		when Convert(Int, Ceiling((IsNull((cvkpi.kpi), 0) / Cast(cvkpi.totalSvisit As Decimal)) * 100)) < 85 then 0
		else ''
		end as Points,
		'' as Comments
		,CVKPI.OfficeID
	From CollegeSuccessCoachVisits cscv
			left join CVKPI on cscv.OfficeID = CVKPI.OfficeID
	group by  CVKPI.OfficeName, CVKPI.KPI, CVKPI.TotalSVisit, CVKPI.OfficeID



Union

Select
		7 As DataPointNumber,
		'Required Data' as 'Metric', -- DataPointDescription
		--CVKPI.CountyID,
		dd.OfficeName,
		(dd.TotalDatapoints - md.MissingDataPt) As KPI, --ValueMatch
		dd.TotalDatapoints As Total -- Total
		,Convert(Int, floor((((dd.TotalDatapoints - md.MissingDataPt)) / Cast(dd.TotalDatapoints As Decimal)) * 100)) As Result, -- percent
		CASE when Convert(Int, floor((((dd.TotalDatapoints - md.MissingDataPt)) / Cast(dd.TotalDatapoints As Decimal)) * 100)) between 90 and 100 then 12.5
		when Convert(Int, floor((((dd.TotalDatapoints - md.MissingDataPt)) / Cast(dd.TotalDatapoints As Decimal)) * 100))  < 90 then 0
		else ''
		end as Points,
		'' as Comments
		,dd.OfficeID
	From DataDenom dd
			left join MissingDataPt md on md.OfficeID = dd.OfficeID
	group by  dd.OfficeName,  dd.OfficeID, dd.TotalDatapoints, md.MissingDataPt

